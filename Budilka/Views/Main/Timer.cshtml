@*

*@
@{
    Layout = "_Layout";
}
@section styles{

}
@using Budilka.DbModels;
@model List<LiveTimer>

@section scripts{
    <script>
        var IsTimerActive = false;
        var timerInterval;
        var overallTime = 0;
        function updateTimer(timeSpan) {
            const lblTime = document.getElementById("lbl-time");
            if (lblTime) {
                lblTime.innerText = timeSpan;
            }
        }
        function getTimer(id, isChange) {
            fetch(`/Main/GetTimer/${id}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json"
                }
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        console.error("Timer not found");
                    }
                })
                .then(data => {
                    if (data) {
                        console.log(data);
                        document.getElementById("time-title").textContent = data.title;
                        if (data.sound != null) {
                            document.getElementById("timerSound").src = "/" + data.sound.rootDirectory + "/" + data.sound.filename;
                        }
                        toggleButtons();

                        overallTime = calculateTotalSeconds(data.timeSpan);
                        var starttime = localStorage.getItem("timerTime");
                        if (starttime == 0) {
                            starttime = overallTime;
                        }
                        updateTimer(formatDuration(moment.duration(starttime, "seconds")));

                        console.log(overallTime);
                        if (isChange) {
                            localStorage.setItem("currentId", id);
                            stopTimer();
                            resetTimer();
                        }
                    }
                });
        }

        function loadTimerTime() {
            const storedTime = localStorage.getItem("timerTime");
            if (storedTime) {
                return JSON.parse(storedTime);
            }
            return 0;
        }
        function calculateTotalSeconds(timeSpanString) {
            console.log(timeSpanString);
            const timeComponents = timeSpanString.split(':');

            let totalSeconds = 0;

            if (timeComponents.length === 3) {
                // If the format is "hh:mm:ss"
                totalSeconds = parseInt(timeComponents[0]) * 3600 + parseInt(timeComponents[1]) * 60 + parseInt(timeComponents[2]);
            } else if (timeComponents.length === 4) {
                // If the format is "dd.hh:mm:ss"
                const daysHours = timeComponents[0].split('.');
                totalSeconds = parseInt(daysHours[0]) * 24 * 3600 + parseInt(daysHours[1]) * 3600 + parseInt(timeComponents[1]) * 60 + parseInt(timeComponents[2]);
            }

            return totalSeconds;
        }

        function formatDuration(duration) {
            return moment.utc(duration.as('milliseconds')).format('HH:mm:ss');
        }

        function removeTimer(id) {
            fetch(`/Main/RemoveTimer/${id}`, {
                method: "post",
            }).then(r => r.json())
                .then(data => {
                    location.reload();
                });
        }

        function startTimer() {
            IsTimerActive = true;
            var startTime = moment.duration(loadTimerTime(), "seconds");

            timerInterval = setInterval(function () {
                if (startTime.asSeconds() <= 0) {
                    IsTimerActive = false;
                    clearInterval(timerInterval);
                    timerEnded()

                } else {
                    startTime.subtract(1, "second");
                    updateTimer(formatDuration(startTime));
                    localStorage.setItem("timerTime", startTime.asSeconds());
                    document.title = formatDuration(startTime);
                }
            }, 1000);

            toggleButtons();
        }

        function timerEnded() {
            toggleButtons();
            var sound = document.getElementById("timerSound");
            $("#timerEndedModal").modal("show");
            sound.play();

        }

        function stopTimer() {
            IsTimerActive = false;
            clearInterval(timerInterval);
            toggleButtons();
        }

        function stopSound() {
            var sound = document.getElementById("timerSound");
            sound.pause();


        }

        function resetTimer() {
            if (IsTimerActive) {
                stopTimer();
            }
            localStorage.setItem("timerTime", overallTime);
            updateTimer(formatDuration(moment.duration(overallTime, "seconds")));
        }

        function toggleButtons() {
            const btnStart = document.getElementById("btn-resume");
            const btnStop = document.getElementById("btn-pause");

            if (IsTimerActive) {
                btnStart.style.display = "none";
                btnStop.style.display = "inline-block";
            } else {
                btnStart.style.display = "inline-block";
                btnStop.style.display = "none";
            }
        }

        function setTimerSound(id) {
            var selectedFile = document.getElementById("soundFileInput").files[0];
            var formData = new FormData();
            formData.append("File", selectedFile);
            fetch(`/Main/SetTimerSound/${id}`, {
                method: "post",
                body: formData
            }).then(r => r.json())
                .then(data => {
                    location.reload();
                });
        }

        document.getElementById("btn-resume").addEventListener("click", startTimer);
        document.getElementById("btn-pause").addEventListener("click", stopTimer);
        document.getElementById("btn-reset").addEventListener("click", resetTimer);

        document.getElementById("btn-submit").addEventListener("click", function () {
            var days = parseInt(document.getElementById("editDays").value) || 0;
            var hours = parseInt(document.getElementById("editHours").value) || 0;
            var minutes = parseInt(document.getElementById("editMinutes").value) || 0;
            var secondsInput = parseInt(document.getElementById("editSeconds").value) || 0;
            var dateTimeInput = $('#datetime').val();
            var selectedDate = moment(dateTimeInput, 'MM/DD/YYYY h:mm A').toDate();
            console.log(dateTimeInput);
            console.log(selectedDate);

            if (!isNaN(selectedDate) && selectedDate < new Date()) {
                return;
            }
            var title = document.getElementById("editTitle").value;
            var totalSeconds = 0;
            fetch("/Main/SetTimer", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    days: days,
                    hours: hours,
                    minutes: minutes,
                    seconds: secondsInput,
                    title: title,
                    date: selectedDate
                })
            }).then(response => {
                console.log(response);
                return response.json()
            })
                .then(data => {
                    console.log(data);
                    localStorage.setItem("currentId", data.id);
                    setTimerSound(data.id);
                    localStorage.setItem("startTime", data.time);
                    localStorage.setItem("timerTime", data.time);
                  
                });

        });

        document.getElementById("btn-edit").addEventListener("click", function () {
            document.getElementById("editDays").value = "";
            document.getElementById("editHours").value = "";
            document.getElementById("editMinutes").value = "";
            document.getElementById("editSeconds").value = "";
            $("#editModal").modal("show");
        });
        document.getElementById("btn-close-result").addEventListener("click", function () {
            $("#timerEndedModal").modal("hide");

        });
        document.getElementById("btn-reset-timer").addEventListener("click", function () {
            $("#timerEndedModal").modal("hide");
            resetTimer();
            startTimer();
        });
        $('#timerEndedModal').on('hidden.bs.modal', function () {
            stopSound();
        });
        document.addEventListener("DOMContentLoaded", function () {
            var currentId = localStorage.getItem("currentId");

            if (currentId) {
                getTimer(currentId, false);
            } else {
                console.error("currentId not found in local storage");
            }

            $('#datetime').datetimepicker();
            $('input[name="datePickerRadio"]').on('change', function () {
                if ($('#datePicker').prop('checked')) {
                    $('#datePickerInput').show();
                    $('#days-selector').hide();
                    $('#hours-selector').hide();
                    $('#minutes-selector').hide();
                    $('#seconds-selector').hide();
                } else {
                    $('#datePickerInput').hide();
                    $('#days-selector').show();
                    $('#hours-selector').show();
                    $('#minutes-selector').show();
                    $('#seconds-selector').show();
                }
            });
        });



    </script>




}
<!DOCTYPE html>
<html class="dark-theme">
<head>
    <meta charset="utf-8">
    <link href="https://db.onlinewebfonts.com/c/84cb021d5f9af287ffff84b61beef6dc?family=clockicons" rel="stylesheet">
    <meta name="viewport" content="width=device-width, initial-scale=1">

</head>
<body>

    <div class="am-wrapper am-fixed-sidebar">

        <nav class="navbar navbar-default navbar-fixed-top am-top-header" style="height:80px;">
            <div class="container-fluid">
                <div class="navbar-header">
                    <div class="page-title">
                        <a href="/" class="navbar-brand"></a>
                    </div>

                </div>
            </div>
        </nav>
        <div class="am-left-sidebar"></div>
        <div class="am-content">
            <div class="main-content">
                <div class="row">
                    <div class="col-md-12 text-light" id="col-main" data-timer-date="" data-timer-time="" style="">
                        <div class="panel panel-default" id="pnl-main" style="display: flex; justify-content: center; align-items: center; height: 506px;">
                            <div id="pnl-time" style="position: relative;">

                                <span id="lbl-time" class="colored digit text-nowrap font-digit" style="font-size: 128px;">1:52:21</span>

                            </div>
                        </div>
                        <h1 id="time-title" class="colored main-title text-center" style="position: absolute; width: 1350px; top: 168px;"></h1>
                        <div id="lbl-date" class="colored  text-center" style="display: none; position: absolute; font-size: 32px; width: 1034px; top: 338px;">01:00:00</div>
                        <div id="pnl-set-timer" class="text-center" style="display: block; position: absolute; width: 1350px; top: 401px;">
                            <button type="button" class="btn btn-space btn-classic btn-primary" style="" id="btn-edit">Change Timer</button>
                            <button type="button" class="btn btn-space btn-classic btn-warning" style="" id="btn-reset">Reset</button>
                            <button type="button" class="btn btn-space btn-classic btn-success" id="btn-resume">Start</button>
                            <button type="button" class="btn btn-space btn-classic btn-danger" style="" id="btn-pause">Stop</button>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="container">
                        <h2 class="mt-4">Timer History</h2>
                        <table class="table">
                            <thead>
                            </thead>
                            <tbody>
                                @foreach (var timer in Model)
                                {
                                    <tr>
                                        <td><a href="#" onclick="getTimer(@timer.Id,true)">@timer.Title</a></td>
                                        <td>@timer.TimeSpan.ToString(@"hh\:mm\:ss")</td>
                                        <td style="text-align:right"><a href="#" onclick="removeTimer(@timer.Id)">×</a></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div id="editModal" class="modal fade" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content bg-dark text-white">
                <div class="modal-header">
                    <h4 class="modal-title">Edit Timer</h4>
                </div>
                <audio id="timerSound"></audio>
                <div class="modal-body">
                    <form id="editForm">
                        <div class="form-group">
                            <label for="editTitle">Title:</label>
                            <input type="text" class="form-control" id="editTitle">
                        </div>
                        <div class="form-check">
                            <input type="radio" class="form-check-input" name="datePickerRadio" id="manualEntry" checked>
                            <label class="form-check-label" for="manualEntry">Manual Entry</label>
                        </div>
                        <div class="form-check">
                            <input type="radio" class="form-check-input" name="datePickerRadio" id="datePicker">
                            <label class="form-check-label" for="datePicker">Use Date & Time Picker</label>
                        </div>
                        <div id="datePickerInput" style="display:none">
                            <div class="form-group">
                                <label for="datetime">Date & Time:</label>
                                <input class="form-control"
                                       type="text" id="datetime" />
                            </div>
                        </div>
                        <div id="days-selector" class="form-group">
                            <label for="editDays">Days:</label>
                            <input type="number" class="form-control" id="editDays" placeholder="0" min="0">
                        </div>
                        <div id="hours-selector" class="form-group">
                            <label for="editHours">Hours:</label>
                            <input type="number" class="form-control" id="editHours" placeholder="0" min="0" max="23">
                        </div>
                        <div id="minutes-selector" class="form-group">
                            <label for="editMinutes">Minutes:</label>
                            <input type="number" class="form-control" id="editMinutes" placeholder="0" min="0" max="59">
                        </div>
                        <div id="seconds-selector" class="form-group">
                            <label for="editSeconds">Seconds:</label>
                            <input type="number" class="form-control" id="editSeconds" placeholder="0" min="0" max="59">
                        </div>
                        <div id="sound-selector" class="form-group">
                            <label for="editMinutes">Sound:</label>
                            <input class="form-control" type="file" id="soundFileInput" accept=".mp3, .wav">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="btn-close-modal">Close</button>
                    <button type="button" class="btn btn-primary" id="btn-submit">Submit</button>
                </div>
            </div>
        </div>
    </div>



    <div id="timerEndedModal" class="modal fade" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content bg-dark text-white">
                <div class="modal-header">
                    <h4 class="modal-title">Timer Ended</h4>
                </div>
                <div class="modal-body">
                    <p>The timer has ended.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="btn-close-result">Ok</button>
                    <button type="button" class="btn btn-primary" id="btn-reset-timer">Restart</button>
                </div>
            </div>
        </div>
    </div>

</body>
</html>
